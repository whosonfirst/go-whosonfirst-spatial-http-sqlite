// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/index.html
// templates/html/pip.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x8e\x4f\xcb\xcf\x2f\x51\xaa\xad\xe5\xe2\xe4\xb4\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb4\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xe4\xaa\xae\x4e\xcd\x4b\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x39\xe9\x08\xde\x39\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 57, mode: os.FileMode(420), modTime: time.Unix(1585680005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x3f\x8f\xdb\x30\x0c\xc5\xe7\xf8\x53\xa8\x9c\x6b\xbb\xdd\x3a\x58\x5e\x7a\x37\xb7\x43\x97\x4e\x05\x2b\x31\x31\xaf\xb2\x24\x88\xbc\xa4\x81\xe1\xef\x5e\xd8\x49\x0a\xdf\xe1\xa6\x43\x16\xff\xa1\xa8\xdf\x7b\x90\xf8\xa6\xc9\xd3\x9e\x23\x19\xe0\xe8\x7e\x0d\x84\x1e\xe6\xb9\xea\x3e\x3c\x7c\xfb\xfa\xe3\xe7\xf7\x47\x33\xe8\x18\xfa\xaa\x5b\x5e\x26\x60\x3c\x58\xa0\x08\x7d\x65\x8c\x31\xdd\xd2\xdd\x57\xbb\x6e\x24\x45\xe3\x06\x2c\x42\x6a\xe1\x59\xf7\xf5\x17\xe8\xab\xdd\xda\xb3\xae\x45\x1c\xc9\xc2\x91\xe9\x94\x53\x51\x30\x2e\x45\xa5\xa8\x16\x4e\xec\x75\xb0\x9e\x8e\xec\xa8\x5e\x7f\x3e\x1a\x8e\xac\x8c\xa1\x16\x87\x81\xec\xe7\xe6\x13\xf4\xbb\x55\xef\x02\x54\xd6\x40\xfd\x21\xd5\xa7\x21\x49\x8a\x7b\x2e\xa2\xb5\x64\x5c\xf6\x74\xed\x65\xf5\xaa\x2d\xae\x70\x56\xa3\xe7\x4c\x16\x94\xfe\x6a\xfb\x84\x47\xbc\x54\xc1\x48\x71\x16\x36\x95\x56\x02\xe7\x7c\x1e\x31\x37\xae\x24\x91\x01\xb9\x48\xf3\x24\xd0\x77\xed\xa5\xe3\x9d\xdc\x90\x1c\x86\x7d\x2a\x78\xa0\x66\xe4\xf8\x12\xb9\x12\xdf\xc7\xdd\x1c\x40\x13\x49\xef\x61\x75\x8b\x7c\x2e\xfc\x86\xd5\x3b\xf9\xbd\x5e\x58\x83\x99\xef\xed\xfb\x86\x1e\x31\xbf\xba\xbe\xdd\xfd\xe0\xcb\x90\xbe\x84\x6f\xce\x25\x70\xfc\x63\x0a\x05\x0b\xa2\xe7\x40\x32\x10\x29\x6c\xe5\x9c\x08\x98\xa1\xd0\xde\xc2\xf2\xfd\xa6\xc2\xda\xd3\xde\xe6\xa3\x6b\x6f\x61\xfb\x9d\xfc\xd9\x78\x54\xac\xd7\x07\x45\x9f\x13\x2f\x59\x9a\x26\xd3\x3c\xa0\xe2\xe3\xb5\x62\xe6\xf9\x7f\x0a\x3d\x1f\x8d\x0b\x28\x62\x61\xc9\x1e\x72\xa4\x02\x57\xf6\x34\x51\xf4\xf3\x5c\xfd\x0b\x00\x00\xff\xff\x80\x7a\x22\x9a\x0a\x04\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1034, mode: os.FileMode(420), modTime: time.Unix(1585872496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\x49\xad\x50\x52\xa8\xad\xe5\xaa\xae\x56\x28\x49\xcd\x2d\xc8\x49\x2c\x01\x0b\x27\xc7\x67\xa4\x26\xa6\x28\x29\xe8\x81\xe4\x14\x14\x14\x14\x6c\x52\x32\xcb\x14\x92\x73\x12\x8b\x8b\x6d\x95\x8a\xf2\xcb\x95\xec\xb8\x20\xc2\xfa\x29\x99\x65\x76\x5c\x98\xda\xd3\xf2\xf3\x4b\xa0\xda\xab\xab\x15\x52\xf3\x52\x40\x2c\x40\x00\x00\x00\xff\xff\x28\xc9\x55\xba\x7a\x00\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 122, mode: os.FileMode(420), modTime: time.Unix(1585680041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlPipHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xc1\xae\xeb\x26\x10\x5d\x27\x5f\x31\x45\x6f\xf9\x88\xf7\x95\x63\xa9\x8b\x56\xaa\x54\x55\x5d\x77\xf3\x84\xcd\x24\x99\xf7\x30\x20\x18\xa7\x37\xb5\xf2\xef\x15\xd8\x49\x70\x92\x7b\xd5\x5b\x75\xd1\xdb\x1d\x1c\xce\xc0\x99\xc3\x38\x4c\xc6\x11\x34\xee\xc8\x22\x08\xef\xc8\x32\x59\xef\xcc\x69\xef\xac\x80\xf3\x79\x3d\x8e\xc0\xd8\x7b\xa3\x18\x41\x90\xed\xbe\x1c\x50\x69\x01\x9b\xb4\x56\x5b\x75\x6c\xd6\x00\x00\xf5\x77\x52\x4e\x83\x9d\x0b\x7d\xb3\x5e\xd5\x64\xfd\xc0\xc0\x27\x8f\x5b\xc1\xf8\xc2\x02\xac\xea\x71\x2b\xbe\x0e\xbd\x97\xec\xa4\x51\x6c\xd2\x11\xa4\x1f\x31\x6f\x54\x87\x07\x67\x34\x86\x69\x11\xd8\x81\x51\xfc\x39\xaf\x1e\x95\x19\x70\x2b\x04\x54\xe9\x9c\x76\x60\x76\x16\x3a\xa3\x62\xdc\x8a\x96\x2d\xb4\x6c\xa5\x0f\xd4\xab\x70\x12\xb3\x80\x38\xb4\x3d\xf1\xf2\xb0\x29\x50\x34\x69\x5e\x57\xd3\x6c\x4e\xa6\x9a\x92\x48\x63\x29\x9b\x75\x5d\xe5\x3c\xd7\xab\x5a\xd3\xf1\x72\x52\xa7\x82\x9e\x36\xcc\xa6\x49\xb2\xf2\x6a\x9b\x56\xac\x24\x59\x62\x52\x26\x25\x45\x3c\x68\xdc\x8a\x71\x84\xcd\xcf\x13\xfa\xcb\x0c\xc2\xf9\x7c\x4f\x77\x76\xff\x84\x7f\x41\x1f\x03\xfe\x74\xae\x5f\x70\x7f\x77\xae\xcf\xb4\x24\x39\xe7\x93\x64\x27\xa5\xbd\xf2\xa2\xd4\x2f\x5b\xa7\x4f\xa2\xa9\x2b\x4d\xc7\xa6\xe0\x96\x94\x9d\x73\x8c\x41\xa4\xbd\x56\xb5\x46\x56\x64\x62\xb3\x5e\x4d\xe4\x38\xf4\xc9\xe6\xe6\x27\x32\x8c\x21\xd6\xd5\x05\xb8\x10\x8a\xdd\x92\xa7\xb2\x3b\x60\xf7\x0d\x6e\x43\x49\xd6\x90\x45\x91\x02\x2e\x35\xf3\xc0\x97\x13\x7e\xef\xb3\xdc\xe5\x53\x5f\xc3\x25\xbe\x50\x64\xb4\xc9\x92\x4b\x1d\xe4\xed\x5a\xf7\x32\x5d\x1c\xc5\x2f\xdd\x10\x02\x5a\xbe\x16\x55\x01\x4d\x92\x8c\x6a\xd1\x3c\x91\x94\x71\x91\x32\x59\x06\x51\x84\x79\x5c\x57\x99\x73\xb5\x62\x36\xf9\x63\xf8\xa2\xd1\x07\xec\x14\xa3\x2e\xad\x29\xd0\x77\xb9\x53\xc6\x51\x84\xdb\xf4\x43\x7b\xd4\xa1\x8a\x4b\x7f\x66\xe4\x7d\x95\x33\xc7\xa4\xc2\xc9\xc3\xb7\x3c\xf9\x28\xd6\xc4\xc1\x63\x88\xa8\x97\xf6\x14\xe8\xbb\x2c\x2a\xe3\x28\xc2\x6d\xfa\x7f\xb2\x8a\xec\xfe\x99\x57\x09\xfe\x47\x66\xe5\xc0\xc2\x2d\xb2\xfb\xe7\x76\xcd\xb3\x71\x84\xa0\xec\x1e\xe1\x13\x7d\x86\x4f\x9e\xe1\xfb\x2d\x6c\x7e\x4b\x0f\x71\x12\x1e\xe1\x7c\x5e\xad\x56\xff\x05\x53\xfd\x45\xd3\x73\x4b\xf3\xf2\xc9\xa3\x1c\xc7\x94\xc6\xe6\x57\xd5\x4f\x8f\xe6\xec\xed\x1d\xfc\xf7\xbd\xbd\x9e\x7b\xbf\x73\xb3\x9c\xbf\x55\x94\xe3\x08\x68\x75\x6a\x9d\x56\xab\xba\xba\xbe\xa6\x6f\x3d\xad\x3f\xbe\x70\x50\xe5\xcb\xfa\xda\x1d\xec\x83\x1b\xfc\x22\x9f\x2c\x1b\x73\xbc\x68\x7e\x80\xce\xf5\xbd\x92\x11\xbd\x0a\xe9\xb7\x17\x0c\x45\x06\xb7\x03\xa5\x35\x31\x39\xab\x0c\xf8\xe0\x3c\x06\x26\x8c\xa9\xe3\x22\xdb\x99\x41\x63\x91\xd0\xb3\xb6\x6e\xe1\x9a\xb3\x1c\x9c\x79\xbc\xbb\xac\x62\xba\xa0\x59\x10\xa8\x40\x4a\x6a\x8c\x5d\xa0\x16\x75\x7b\xba\xad\x2c\xda\x3f\xf1\xda\xd7\x5d\xf8\x97\x0a\xb3\xa4\x5c\x2b\xfb\xa1\x61\x6b\xee\x3a\x22\x4f\x5e\x06\x8c\x83\xe1\xf8\xac\x33\xca\x17\x53\x50\x7b\xc5\xdd\x01\x63\x6a\x99\x06\xd3\xe4\xef\x61\xb1\xde\x29\xab\x49\x2b\xbe\x52\x4a\x5d\xb3\xf0\x8b\xc8\x75\x6d\xc8\x7e\x83\x80\x66\x2b\x22\x9f\x0c\xc6\x03\x22\x8b\xc2\xdb\xaa\x8b\x51\xc0\x21\xe0\x6e\x2b\xd2\xb8\xfa\xe3\xe0\xa2\xb3\x3b\x0a\x91\x37\xd1\xab\xf4\xbb\xb2\xf1\xe4\x37\x99\x57\x35\xeb\x3a\x99\xe9\xcb\xeb\xa9\xbe\xaa\xa3\x9a\x50\x01\x31\x74\x5b\x51\x20\xaf\xee\xf7\x35\xcb\x9f\x48\xff\xde\xae\xa9\x61\xbd\xdb\xfa\xf1\xdf\x45\x6a\x37\xe7\x7f\x17\xb7\x8f\xe5\xaf\x00\x00\x00\xff\xff\xed\x51\x9a\x78\xa2\x0c\x00\x00")

func templatesHtmlPipHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlPipHtml,
		"templates/html/pip.html",
	)
}

func templatesHtmlPipHtml() (*asset, error) {
	bytes, err := templatesHtmlPipHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/pip.html", size: 3234, mode: os.FileMode(420), modTime: time.Unix(1585954330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/index.html": templatesHtmlIndexHtml,
	"templates/html/pip.html": templatesHtmlPipHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
			"pip.html": &bintree{templatesHtmlPipHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

